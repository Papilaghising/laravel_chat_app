name: configuring chatapp in ec2

on:
  push:
    branches:
      - dev 
      - main
  workflow_dispatch:
permissions:
      id-token: write
      contents: read
      pull-requests: write

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_KEY }}
  AWS_SESSION_TOKEN: ${{ secrets.SESSION_TOKEN }}
  AWS_REGION: "us-east-1"
  backendS3Bucket: "8586-terraform-state"
  backendS3StateFile: ${{ secrets.ACCOUNT_ID }}/${{ github.ref_name }}
  # devSecretId: rds!db-5d83f992-2d89-4127-b155-2979896cf593
  # prodSecretId: how to fetch this secret_id of the secrets in secret manager managed and created by rds


jobs:  
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ env.ACCESS_KEY }}
          aws-secret-access-key: ${{ env.SECRET_KEY }}
          aws-session-token: ${{ env.SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Initialize Terraform
        run: |
          cd terraform
          terraform init -backend-config="bucket=${{ env.backendS3Bucket }}" -backend-config="key=${{ env.backendS3StateFile }}" -backend-config="region=${{ env.AWS_REGION }}"    

        
      - name: Get the codebase bucket name
        uses: mathiasvr/command-output@v1
        id: resource-names
        with:
          run: |
            state_file_name=${{ env.backendS3StateFile }}
            aws s3 cp s3://${{ env.backendS3Bucket }}/${{ env.backendS3StateFile }} $state_file_name
            
            # DB Endpoint
            db_endpoint=$(terraform output --json -state=$state_file_name | jq -r '.db_host.value')
            echo "db_endpoint=$db_endpoint" >> "$GITHUB_ENV"
            
            # DB Name
            db_name=$(terraform output --json -state=$state_file_name | jq -r '.db_name.value')
            echo "db_name=$db_name" >> "$GITHUB_ENV"
            
            # DB UserName
            db_username=$(terraform output --json -state=$state_file_name | jq -r '.db_username.value')
            echo "db_username=$db_username" >> "$GITHUB_ENV"    
        
            # ECR Registry name
            ecr_name=$(terraform output --json -state=$state_file_name | jq -r '.ecr_name.value')
            echo "ecr_name=$ecr_name" >> "$GITHUB_ENV"
            
            # secret id dev_db
            dev_sid=$(terraform output --json -state=$state_file_name | jq -r '.regex("secret:([^:]+)$", module.db.db_instance_master_user_secret_arn)[0]')
            echo "dev_sid=$dev_sid" >> "$GITHUB_ENV"
            
            # secret id prod_db
            prod_sid=$(terraform output --json -state=$state_file_name | jq -r '.secret_id.value')
            echo "prod_sid=$prod_sid" >> "$GITHUB_ENV"

      - name: retrieve secret value development server database
        run: |
        if: github.ref_name == 'dev'
          password=$(aws secretsmanager get-secret-value --secret-id '${{ env.dev_sid }}' --query SecretString --output text | jq -r '.password')
          echo "db_password=$password" >> "$GITHUB_ENV"
          echo "app_url=https://devchat.sandbox.adex.ltd" >> "$GITHUB_ENV"
          
      - name: retrieve secret value production server database
        run: |
        if: github.ref_name == 'main'
          password=$(aws secretsmanager get-secret-value --secret-id '${{ env.prod_sid }}' --query SecretString --output text | jq -r '.password')
          echo "db_password=$password" >> "$GITHUB_ENV"
          echo "app_url=https://chat.sandbox.adex.ltd" >> "$GITHUB_ENV"


      - name: Create .env for application
        run: |
          cat << EOF > .env
              APP_URL=${{ env.app_url }}
              APP_NAME=Laravel
              APP_ENV=local
              APP_KEY=base64:MFZBNV/3ipBTpWhDq1t4N7BSfmv8lY+noBb4xZs/LVY=
              APP_DEBUG=false
              LOG_CHANNEL=stack
              DB_CONNECTION=mysql
              DB_HOST=${{ env.db_endpoint }}
              DB_PORT=3306
              DB_DATABASE=${{ env.db_name }}
              DB_USERNAME=${{ env.db_username }}
              DB_PASSWORD=${{ env.db_password }}

              BROADCAST_DRIVER=pusher
              CACHE_DRIVER=file
              QUEUE_CONNECTION=sync
              SESSION_DRIVER=file
              SESSION_LIFETIME=120

              REDIS_HOST=127.0.0.1
              REDIS_PASSWORD=null
              REDIS_PORT=6379

              MAIL_MAILER=smtp
              MAIL_HOST=smtp.mailtrap.io
              MAIL_PORT=2525
              MAIL_USERNAME=null
              MAIL_PASSWORD=null
              MAIL_ENCRYPTION=null
              MAIL_FROM_ADDRESS=null
              MAIL_FROM_NAME="${APP_NAME}"

              AWS_ACCESS_KEY_ID=
              AWS_SECRET_ACCESS_KEY=
              AWS_DEFAULT_REGION=us-east-1
              AWS_BUCKET=

              PUSHER_APP_ID="1828362"
              PUSHER_APP_KEY="6669062bdb97203a01fa"
              PUSHER_APP_SECRET="a279ee624bafeeea8237"
              PUSHER_APP_CLUSTER="ap2"

              MIX_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
              MIX_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"
              EOF

      - name: Generate docker image tag
        id: generate-image-tag
        if: steps.prerun.outputs.result != 'skip'
        run: echo "IMAGE_TAG=$GITHUB_SHA-$GITHUB_RUN_ID-$GITHUB_RUN_ATTEMPT" >> $GITHUB_ENV && echo $IMAGE_TAG

      - name: Build, tag, and push image to Amazon ECRr
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{ env.ecr_name }}
          docker build  -f ./laravel/Dockerfile -t  ${{ secrets.ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{ env.ecr_name }}:${{ env.IMAGE_TAG }} ./laravel
          docker push ${{ secrets.ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/${{ env.ecr_name }}:${{ env.IMAGE_TAG }}


      - name: install ansible and dependencies
        run: |
          pip3 install botocore boto3 ansible

      - name: run ansible playbook in development environment
        if: github.ref_name == 'dev'
        run: |
          cd ansible
          ansible-playbook -i aws_ec2.yml playbook.yml -e '{"docker_image_tag": "${{ env.IMAGE_TAG }}", "ecr_name": "${{ env.ecr_name}}"}'  


      - name: run ansible playbook in production environment
        if: github.ref_name == 'main'
        run: |
          cd ansible 
          ansible-playbook -i aws_ec2.yml production.yml -e '{"docker_image_tag": "${{ env.IMAGE_TAG }}", "ecr_name": "${{ env.ecr_name}}"}'